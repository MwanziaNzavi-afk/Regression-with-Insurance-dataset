sample_submission <- read.csv("C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/sample_submission.csv")
View(sample_submission)
test <- read.csv("C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/test.csv")
View(test)
train <- read.csv("C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/train.csv")
View(train)
source("C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/insurance_regression.R")
# Load Required Libraries
library(tidyverse)    # For data manipulation and visualization
library(caret)        # For data splitting and machine learning
library(randomForest) # For Random Forest model
library(xgboost)      # For XGBoost model
library(Metrics)      # For RMSLE calculation
# Set File Paths
train_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/train.csv"
test_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/test.csv"
submission_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/sample_submission.csv"
# Load Datasets
train_data <- read.csv(train_path)
test_data <- read.csv(test_path)
sample_submission <- read.csv(submission_path)
# Data Exploration
print("Structure of Train Data:")
str(train_data)
print("Structure of Test Data:")
str(test_data)
# Summary of the target variable
summary(train_data$Premium.Amount)
# Check for missing values
cat("Missing values in Train Data:\n")
print(colSums(is.na(train_data)))
cat("Missing values in Test Data:\n")
print(colSums(is.na(test_data)))
# Visualize the Target Variable
ggplot(train_data, aes(x = Premium.Amount)) +
geom_histogram(bins = 30, fill = "blue", color = "white") +
theme_minimal() +
labs(title = "Distribution of Premium Amount", x = "Premium Amount", y = "Frequency")
# Log-transform the target variable
train_data$LogPremium <- log1p(train_data$Premium.Amount)
# Remove irrelevant columns (e.g., id)
train_data <- train_data %>% select(-id)
test_data <- test_data %>% select(-id)
# Handle missing values (replace with mean for simplicity)
train_data[is.na(train_data)] <- lapply(train_data, function(x) ifelse(is.numeric(x), mean(x, na.rm = TRUE), x))
# Load Required Libraries
library(tidyverse)    # For data manipulation and visualization
library(caret)        # For data splitting and machine learning
library(randomForest) # For Random Forest model
library(xgboost)      # For XGBoost model
library(Metrics)      # For RMSLE calculation
# Set File Paths
train_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/train.csv"
test_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/test.csv"
submission_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/sample_submission.csv"
# Load Datasets
train_data <- read.csv(train_path)
# Load Required Libraries
library(tidyverse)    # For data manipulation and visualization
library(caret)        # For data splitting and machine learning
library(randomForest) # For Random Forest model
library(xgboost)      # For XGBoost model
library(Metrics)      # For RMSLE calculation
# Set File Paths
train_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/train.csv"
test_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/test.csv"
submission_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/sample_submission.csv"
# Load Datasets
train_data <- read.csv(train_path)
test_data <- read.csv(test_path)
sample_submission <- read.csv(submission_path)
# Data Exploration
print("Structure of Train Data:")
str(train_data)
print("Structure of Test Data:")
str(test_data)
# Summary of the target variable
summary(train_data$Premium.Amount)
# Check for missing values
cat("Missing values in Train Data:\n")
print(colSums(is.na(train_data)))
cat("Missing values in Test Data:\n")
print(colSums(is.na(test_data)))
# Visualize the Target Variable
ggplot(train_data, aes(x = Premium.Amount)) +
geom_histogram(bins = 30, fill = "blue", color = "white") +
theme_minimal() +
labs(title = "Distribution of Premium Amount", x = "Premium Amount", y = "Frequency")
# Log-transform the target variable
train_data$LogPremium <- log1p(train_data$Premium.Amount)
# Remove irrelevant columns (e.g., id)
train_data <- train_data %>% select(-id)
test_data <- test_data %>% select(-id)
# Handle missing values (replace with mean for simplicity)
train_data[is.na(train_data)] <- lapply(train_data, function(x) ifelse(is.numeric(x), mean(x, na.rm = TRUE), x))
# Load Required Libraries
library(tidyverse)    # For data manipulation and visualization
library(caret)        # For data splitting and machine learning
library(randomForest) # For Random Forest model
library(xgboost)      # For XGBoost model
library(Metrics)      # For RMSLE calculation
# Set File Paths
train_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/train.csv"
test_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/test.csv"
submission_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/sample_submission.csv"
# Load Datasets
train_data <- read.csv(train_path)
# Load Required Libraries
library(tidyverse)    # For data manipulation and visualization
library(caret)        # For data splitting and machine learning
library(randomForest) # For Random Forest model
library(xgboost)      # For XGBoost model
library(Metrics)      # For RMSLE calculation
# Set File Paths
train_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/train.csv"
test_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/test.csv"
submission_path <- "C:/Users/mwanz/OneDrive/Desktop/Regression with an Insurance Dataset/sample_submission.csv"
# Load Datasets
train_data <- read.csv(train_path)
